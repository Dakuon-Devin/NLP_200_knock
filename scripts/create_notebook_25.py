import nbformat as nbf
import os
from pathlib import Path

def create_notebook_25():
    """Create notebook for problem 25 (Extract templates)"""
    # Create a new notebook
    nb = nbf.v4.new_notebook()
    
    # Add cells
    nb['cells'] = [
        nbf.v4.new_markdown_cell('# 25. テンプレートの抽出\n\n記事中に含まれる「基礎情報」テンプレートのフィールド名と値を抽出し，辞書オブジェクトとして格納せよ．'),
        nbf.v4.new_code_cell('# 問題25: テンプレートの抽出\n\nimport os\nimport re\n\n# イギリスの記事ファイルのパス\ndata_dir = "../data"\nuk_article_file = os.path.join(data_dir, "uk_article.txt")\n\n# 基礎情報テンプレートのフィールド名と値を抽出する関数\ndef extract_basic_info_template(text):\n    """記事から基礎情報テンプレートのフィールド名と値を抽出する関数\n    \n    Args:\n        text: 記事のテキスト\n        \n    Returns:\n        フィールド名と値の辞書\n    """\n    # 基礎情報テンプレートの抽出\n    template_pattern = r"\\{\\{基礎情報[^|]*?\\|([\\s\\S]*?)\\}\\}"\n    template_match = re.search(template_pattern, text)\n    \n    if not template_match:\n        return {}\n    \n    template_content = template_match.group(1)\n    \n    # フィールドの抽出\n    field_pattern = r"\\|\\s*([^|\\}]+?)\\s*=\\s*([^|]*?)(?:\\||\\}\\}$)"\n    fields = re.findall(field_pattern, template_content + "}}")\n    \n    # 辞書に格納\n    basic_info = {}\n    for name, value in fields:\n        # 前後の空白を削除\n        name = name.strip()\n        value = value.strip()\n        basic_info[name] = value\n    \n    return basic_info\n\n# メイン処理\ntry:\n    # イギリスの記事を読み込む\n    if os.path.exists(uk_article_file):\n        with open(uk_article_file, "r", encoding="utf-8") as f:\n            uk_article = f.read()\n        \n        # 基礎情報テンプレートのフィールド名と値を抽出\n        basic_info = extract_basic_info_template(uk_article)\n        \n        # 結果を表示\n        print(f"基礎情報テンプレートのフィールド数: {len(basic_info)}\\n")\n        print("基礎情報テンプレートの内容:")\n        for i, (name, value) in enumerate(basic_info.items()):\n            # 値が長い場合は省略\n            if len(value) > 100:\n                value = value[:100] + "..."\n            print(f"{i+1}. {name}: {value}")\n    else:\n        print(f"イギリスの記事ファイルが見つかりません: {uk_article_file}")\n        print("問題20を先に実行して、イギリスの記事を抽出してください。")\n        \nexcept Exception as e:\n    print(f"エラーが発生しました: {e}")'),
        nbf.v4.new_code_cell('# 改良版: 複数行にまたがるフィールド値に対応\n\ndef extract_basic_info_template_improved(text):\n    """複数行にまたがるフィールド値に対応した基礎情報テンプレート抽出関数\n    \n    Args:\n        text: 記事のテキスト\n        \n    Returns:\n        フィールド名と値の辞書\n    """\n    # 基礎情報テンプレートの抽出\n    template_pattern = r"\\{\\{基礎情報[^|]*?\\|([\\s\\S]*?)\\}\\}"\n    template_match = re.search(template_pattern, text)\n    \n    if not template_match:\n        return {}\n    \n    template_content = template_match.group(1)\n    \n    # フィールドの抽出（行ごとに処理）\n    basic_info = {}\n    field_name = None\n    field_value = []\n    \n    for line in template_content.split("\\n"):\n        # 新しいフィールドの開始\n        field_match = re.match(r"\\|\\s*([^=]+?)\\s*=\\s*(.*)", line)\n        if field_match:\n            # 前のフィールドがあれば保存\n            if field_name is not None:\n                basic_info[field_name] = "\\n".join(field_value).strip()\n            \n            # 新しいフィールドの開始\n            field_name = field_match.group(1).strip()\n            field_value = [field_match.group(2).strip()]\n        else:\n            # 現在のフィールドの値の続き\n            if field_name is not None:\n                field_value.append(line.strip())\n    \n    # 最後のフィールドを保存\n    if field_name is not None:\n        basic_info[field_name] = "\\n".join(field_value).strip()\n    \n    return basic_info\n\n# イギリスの記事ファイルが存在する場合のみ実行\nif os.path.exists(uk_article_file):\n    with open(uk_article_file, "r", encoding="utf-8") as f:\n        uk_article = f.read()\n    \n    # 改良版の関数を使用して基礎情報テンプレートを抽出\n    basic_info_improved = extract_basic_info_template_improved(uk_article)\n    \n    # 結果を表示\n    print(f"\\n改良版: 基礎情報テンプレートのフィールド数: {len(basic_info_improved)}\\n")\n    \n    # 2つの方法の結果を比較\n    print("2つの方法の比較:")\n    print(f"方法1のフィールド数: {len(basic_info)}")\n    print(f"方法2のフィールド数: {len(basic_info_improved)}")\n    \n    # 方法1にあって方法2にないフィールド\n    only_in_method1 = set(basic_info.keys()) - set(basic_info_improved.keys())\n    if only_in_method1:\n        print(f"\\n方法1のみに含まれるフィールド: {only_in_method1}")\n    \n    # 方法2にあって方法1にないフィールド\n    only_in_method2 = set(basic_info_improved.keys()) - set(basic_info.keys())\n    if only_in_method2:\n        print(f"\\n方法2のみに含まれるフィールド: {only_in_method2}")'),
        nbf.v4.new_code_cell('# 基礎情報テンプレートの特定のフィールドを表示\n\ndef display_specific_fields(basic_info, fields_to_display):\n    """基礎情報テンプレートの特定のフィールドを表示する関数\n    \n    Args:\n        basic_info: 基礎情報テンプレートの辞書\n        fields_to_display: 表示するフィールド名のリスト\n    """\n    print("\\n特定のフィールドの内容:")\n    for field in fields_to_display:\n        if field in basic_info:\n            value = basic_info[field]\n            # 値が長い場合は省略\n            if len(value) > 100:\n                value = value[:100] + "..."\n            print(f"{field}: {value}")\n        else:\n            print(f"{field}: フィールドが見つかりません")\n\n# イギリスの記事ファイルが存在する場合のみ実行\nif os.path.exists(uk_article_file):\n    # 表示する特定のフィールド\n    fields_to_display = ["正式名称", "国旗画像", "国章画像", "位置画像", "公用語", "首都", "最大都市"]\n    \n    # 特定のフィールドを表示\n    display_specific_fields(basic_info_improved, fields_to_display)'),
        nbf.v4.new_markdown_cell('## 解説\n\nこの問題では、記事中に含まれる「基礎情報」テンプレートのフィールド名と値を抽出し、辞書オブジェクトとして格納する方法を学びます。\n\n### 基礎情報テンプレートの形式\n\nWikipediaの記事では、基礎情報テンプレートは以下の形式で表現されています：\n\n```\n{{基礎情報 国\n|略名 = イギリス\n|日本語国名 = グレートブリテン及び北アイルランド連合王国\n|公式国名 = {{lang|en|United Kingdom of Great Britain and Northern Ireland}}\n...\n}}\n```\n\n### 抽出の手順\n\n1. **テンプレート全体の抽出**：\n   - 正規表現を使用して、`{{基礎情報 ...}}` の形式のテンプレート全体を抽出します。\n\n2. **フィールドの抽出**：\n   - テンプレート内の各フィールドを抽出します。\n   - フィールドは `|フィールド名 = 値` の形式で表現されています。\n\n### 2つの実装方法\n\n1. **正規表現のみを使用する方法**：\n   - 正規表現を使用して、テンプレート全体とフィールドを一度に抽出します。\n   - 複数行にまたがるフィールド値の処理が難しい場合があります。\n\n2. **行ごとに処理する方法**：\n   - テンプレート全体を抽出した後、行ごとに処理します。\n   - 新しいフィールドの開始を検出し、それまでの値を保存します。\n   - 複数行にまたがるフィールド値も正しく処理できます。\n\n### 注意点\n\n- テンプレート内のフィールド値には、WikipediaのマークアップやHTMLタグが含まれている場合があります。\n- フィールド値が複数行にまたがる場合、単純な正規表現では正確に抽出できないことがあります。\n- テンプレートの構造が複雑な場合（入れ子になったテンプレートなど）、より高度な解析が必要になることがあります。\n- 実際のWikipediaの記事では、テンプレートの形式が統一されていない場合があります。')
    ]
    
    # Create directory if it doesn't exist
    os.makedirs('notebooks/chapter03', exist_ok=True)
    
    # Write the notebook to a file
    notebook_path = Path('notebooks/chapter03/25_basic_info_template.ipynb')
    notebook_path.write_text(nbf.v4.writes(nb))
    
    print(f"Notebook created at {notebook_path}")

if __name__ == "__main__":
    create_notebook_25()
